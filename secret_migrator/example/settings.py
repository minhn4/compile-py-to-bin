"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import base64
import logging
from pathlib import Path

import hvac
import environ
import yaml
from celery.schedules import crontab
from django.utils.translation import gettext_lazy as _

from backend.beat_config import load_beat_schedule


BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")

# Authenticate with Vault
client = hvac.Client(url="http://localhost:8200/", token="hvs.Y30WrR6bAp7vtpaVBQlueAcn")
if not client.is_authenticated():
    print("Vault authentication failed.")
    exit(1)

VAULT_MOUNT_POINT = "cmp-backend"
secrets = {}

try:
    # List all the secrets under the specified mount point
    response = client.secrets.kv.v2.list_secrets(mount_point=VAULT_MOUNT_POINT, path="")

    if response and response.get("data") and response["data"].get("keys"):
        secret_keys = response["data"]["keys"]
        for key in secret_keys:
            # Read the value of each secret
            secret = (
                client.secrets.kv.v2.read_secret_version(
                    mount_point=VAULT_MOUNT_POINT, path=key
                )["data"]["data"],
            )

            if secret:
                if secret[0][key] == '""':
                    secret[0][key] = ""
                secrets[key] = secret[0][key]
            else:
                print(f"Unable to read secret '{key}'.")
    else:
        print(f"No secrets found in '{VAULT_MOUNT_POINT}'.")
except hvac.exceptions.VaultError as e:
    print(f"Error listing or reading secrets in Vault: {e}")

DEBUG = True if secrets["DEBUG"] else False

SECRET_KEY = secrets["SECRET_KEY"]

ALLOWED_HOSTS = ["*"]

logging.captureWarnings(True)

# Application definition

INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "storages",
    # Third-party apps
    "django_filters",
    "rest_framework",
    "taggit",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "django_prometheus",
    "djmoney",
    "netfields",
    # Internal apps
    "alarm",
    "api_gateway",
    "invitation",
    "organization",
    "tenant",
    "infra",
    "kaas",
    "dbaas",
    "container_registry",
    "object_storage",
    "extras",
    "support",
    "marketplace",
    "utilities",
    "service_catalog",
    "secret_manager",
    "key_manager",
    "billing",
    "plan",
    "iam",
    "task_manager",
    "ci",
    "cd",
    "kafka_django",
    "baas",
    "broadcast_message",
]

MIDDLEWARE = [
    # Monitor before middleware
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    # Default middlewares
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Third-party middlewares
    "log_request_id.middleware.RequestIDMiddleware",
    "backend.middleware.LogResponseResultMiddleware",
    # Monitor after middleware
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "backend.urls"

PRODUCTION_TEMPLATES = [] if DEBUG else ["backend/templates"]
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "backend/invitation/templates",
            "plan/bccs/templates",
            *PRODUCTION_TEMPLATES,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_prometheus.db.backends.postgresql",
        "NAME": secrets["DB_NAME"],
        "USER": secrets["DB_USER"],
        "PASSWORD": secrets["DB_PASSWORD"],
        "HOST": secrets["DB_HOST"],
        "PORT": int(secrets["DB_PORT"]),
        # Server side cursors need to be disabled when used
        # with transaction pooling
        "DISABLE_SERVER_SIDE_CURSORS": True,
    }
}

# Redis configurations
REDIS_USE_SENTINEL = True if secrets["REDIS_USE_SENTINEL"] else False
REDIS_SENTINEL_ENABLE_AUTHENTICATION = (
    True if secrets["REDIS_SENTINEL_ENABLE_AUTHENTICATION"] else False
)
REDIS_SENTINEL_PASSWORD = (
    secrets["REDIS_SENTINEL_PASSWORD"] if secrets["REDIS_SENTINEL_PASSWORD"] else ""
)
if REDIS_SENTINEL_ENABLE_AUTHENTICATION:
    assert (
        REDIS_SENTINEL_PASSWORD
    ), "Must set REDIS_SENTINEL_PASSWORD when enable redis sentinel authentication"

# Sentinel configurations
REDIS_SENTINEL_SERVICE = (
    secrets["REDIS_SENTINEL_SERVICE"] if secrets["REDIS_SENTINEL_SERVICE"] else ""
)
sentinel_list = secrets["REDIS_SENTINELS"] if secrets["REDIS_SENTINELS"] else []
REDIS_SENTINELS = [sentinel.split(":") for sentinel in sentinel_list]

# Redis-standalone configurations
REDIS_HOST = secrets["REDIS_HOST"] if secrets["REDIS_HOST"] else ""
REDIS_PORT = int(secrets["REDIS_HOST"]) if secrets["REDIS_HOST"] else 6379
REDIS_PASSWORD = secrets["REDIS_PASSWORD"] if secrets["REDIS_PASSWORD"] else ""

# Caches
# https://docs.djangoproject.com/en/4.0/topics/cache/
CACHING_REDIS_DISABLED = True if secrets["CACHING_REDIS_DISABLED"] else False
CACHING_REDIS_DATABASE = (
    int(secrets["CACHING_REDIS_DATABASE"]) if secrets["CACHING_REDIS_DISABLED"] else 0
)

if CACHING_REDIS_DISABLED:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        }
    }
elif REDIS_USE_SENTINEL:
    DJANGO_REDIS_CONNECTION_FACTORY = "django_redis.pool.SentinelConnectionFactory"
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f"redis://{REDIS_SENTINEL_SERVICE}/{CACHING_REDIS_DATABASE}",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.SentinelClient",
                "SENTINELS": REDIS_SENTINELS,
            },
        }
    }
    if REDIS_SENTINEL_ENABLE_AUTHENTICATION:
        CACHES["default"]["OPTIONS"]["SENTINEL_KWARGS"] = {
            "password": REDIS_SENTINEL_PASSWORD
        }
else:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            # TODO: Add ACL support
            "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{CACHING_REDIS_DATABASE}",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": REDIS_PASSWORD,
            },
        }
    }

# Task Queue Config
TASK_WORKER_DISABLED = env("TASK_WORKER_DISABLED", bool, False)
TASK_REDIS_DATABASE = env("TASK_REDIS_DATABASE", int, 1)
if REDIS_USE_SENTINEL:
    CELERY_BROKER_URL = ";".join(
        f"sentinel://{host}:{port}" for host, port in REDIS_SENTINELS
    )
    CELERY_BROKER_TRANSPORT_OPTIONS = {
        "master_name": REDIS_SENTINEL_SERVICE,
        "visibility_timeout": 4500,
    }
    if REDIS_SENTINEL_ENABLE_AUTHENTICATION:
        CELERY_BROKER_TRANSPORT_OPTIONS["sentinel_kwargs"] = {
            "password": REDIS_SENTINEL_PASSWORD
        }
else:
    CELERY_BROKER_URL = (
        f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{TASK_REDIS_DATABASE}"
    )

CELERY_TASK_TIME_LIMIT = 300
CELERY_TASK_SOFT_TIME_LIMIT = 240
CELERY_WORKER_CONCURRENCY = 30
CELERY_TASK_ROUTES = {
    "plan.*": {"queue": "plan"},
}

# Celery beat schedule configurations
CELERY_BEAT_SCHEDULE = load_beat_schedule()

# Lock Config
LOCK_REDIS_DISABLED = env("LOCK_REDIS_DISABLED", bool, False)
LOCK_REDIS_DATABASE = env("LOCK_REDIS_DATABASE", int, 2)
LOCK_EXPIRE_TIME = env("LOCK_EXPIRE_TIME", int, 120)
LOCK_HOLD_TIME = min(env("LOCK_HOLD_TIME", int, 5), CELERY_TASK_SOFT_TIME_LIMIT)
LOCK_AUTO_RELEASE = env("LOCK_AUTO_RELEASE", bool, True)

# User Class
AUTH_USER_MODEL = "tenant.User"

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

LANGUAGES = [
    ("vi", _("Vietnamese")),
    ("en", _("English")),
]

LOCALE_PATHS = [
    BASE_DIR / "backend/locale",
    BASE_DIR / "backend/translation/general/locale",
    BASE_DIR / "backend/translation/rest_framework/locale",
    BASE_DIR / "admin_api/locale",
]

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = BASE_DIR / "static"
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings
if env("EMAIL_USE_FILE_BACKEND", bool, False):
    EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
    EMAIL_FILE_PATH = env("EMAIL_FILE_PATH", str, "/tmp/app-messages")
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_HOST = env("EMAIL_HOST", str, "localhost")
EMAIL_HOST_USER = env("EMAIL_HOST_USER", str, "")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", str, "")
EMAIL_USE_SSL = env("EMAIL_USE_SSL", bool, True)
EMAIL_PORT = env("EMAIL_PORT", int, 465)
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", str, "admin@localhost.com")

MANAGED_SERVICE_BUSINESS_SUPPORT_TEAM_EMAIL = env(
    "MANAGED_SERVICE_BUSINESS_SUPPORT_TEAM_EMAIL", str, "support@localhost.com"
)
MANAGED_SERVICE_NOC_VTS_EMAIL = env(
    "MANAGED_SERVICE_NOC_VTS_EMAIL", str, "noc_vts@localhost.com"
)

# Testing settings. Environment variables in this dict should NOT be registered on deployment tools
TESTING = {
    "USE_SCHEMA_TESTER": env("USE_SCHEMA_TESTER", bool, True),
}

# Logging settings
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"request_id": {"()": "log_request_id.filters.RequestIDFilter"}},
    "formatters": {
        "standard": {
            "format": "%(levelname)-8s [%(asctime)s] [%(request_id)s] %(name)s: %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "filters": ["request_id"],
            "formatter": "standard",
        },
        "syslog": {
            "level": "DEBUG",
            "class": "logging.handlers.SysLogHandler",
            "facility": "local7",
            "address": (
                env("SYSLOG_ADDRESS", str, "localhost"),
                env("SYSLOG_PORT", int, 5514),
            ),
            "formatter": "standard",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console", "syslog"],
            "level": "INFO",
            "propagate": True,
        },
        "backend.clients.bccs": {
            "handlers": ["console", "syslog"],
            "level": env("BCCS_LOG_LEVEL", str, "INFO"),
            "propagate": False,
        },
        "zeep.transports": {
            "level": env("BCCS_LOG_LEVEL", str, "INFO"),
            "propagate": True,
            "handlers": ["console"],
        },
    },
}

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "backend.authentication.PATAuthentication",
    ]
    if env("DISABLE_IAM", bool, False)
    else [
        "backend.authentication.KeycloakAuthentication",
        "backend.authentication.PATAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "backend.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_SCHEMA_CLASS": "backend.openapi.auto_schema.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "CMP Backend API",
    "DESCRIPTION": "The Backend REST API for the CMP project",
    "SERVE_INCLUDE_SCHEMA": False,
    # SIDECAR SETTINGS
    "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "POSTPROCESSING_HOOKS": ["backend.openapi.hooks.postprocess_schema_enums"],
    # UI SETTINGS
    "SWAGGER_UI_SETTINGS": {
        "persistAuthorization": True,
        "docExpansion": "none",
        "deepLinking": True,
        "displayOperationId": True,
    },
}

# General settings
DISABLE_SYNC_TENANT = env("DISABLE_SYNC_TENANT", bool, False)

KEYCLOAK_CONFIG = {
    "SERVER_URL": env("KEYCLOAK_SERVER_URL"),
    "REALM_NAME": env("KEYCLOAK_REALM_NAME"),
    "PUBLIC_KEY": env("KEYCLOAK_PUBLIC_KEY"),
    "CLIENT_ID": env("KEYCLOAK_CLIENT_ID"),
    "CLIENT_SECRET_KEY": env("KEYCLOAK_CLIENT_SECRET_KEY"),
    "VERIFY_SSL": env("KEYCLOAK_VERIFY_SSL", bool, False),
    "DISABLE_SYNC_TENANT": env("KEYCLOAK_DISABLE_SYNC_TENANT", bool, False),
}

PAT = {
    "AUTH_TOKEN_CHARACTER_LENGTH": 64,
    "TOKEN_TTL": None,
    "TOKEN_KEY_LENGTH": 8,
    "TOKEN_LIMIT_PER_USER": 10,
}

INVITATION_CONFIG = {
    "EXPIRY_TIMEOUT": env("INVITATION_EXPIRY_TIMEOUT", int, 300),
    "BASE_URL": env("INVITATION_BASE_URL", str, "http://127.0.0.1:3000"),
    "GROUP_USER_BASE_URL": env(
        "GROUP_USER_INVITATION_BASE_URL", str, "http://127.0.0.1:3000"
    ),
}

CONTAINER_REGISTRY = {
    "SERVER_PRIVATE_URL": env("CONTAINER_REGISTRY_PRIVATE_URL"),
    "SERVER_PUBLIC_URL": env("CONTAINER_REGISTRY_PUBLIC_URL"),
    "ADMIN_USER": env("CONTAINER_REGISTRY_ADMIN_USER"),
    "ADMIN_PASSWORD": env("CONTAINER_REGISTRY_ADMIN_PASSWORD"),
    "API_VERSION": env("CONTAINER_REGISTRY_API_VERSION", str, "v2.0"),
    "VERIFY_SSL": env("CONTAINER_REGISTRY_VERIFY_SSL", bool, False),
    "DISABLE_SYNC_TENANT": env("CONTAINER_REGISTRY_DISABLE_SYNC_TENANT", bool, False),
    "ACTIVE_REGIONS": env(
        "CONTAINER_REGISTRY_ACTIVE_REGIONS",
        list,
        [
            "vn-central-1",
        ],
    ),
    "DEFAULT_INIT_QUOTA": 5242880,
    "BACKGROUND_FETCH_LIMIT": env("BACKGROUND_FETCH_LIMIT", int, 50),
}

KAAS = {
    "KUBE_CONFIG_DICT": yaml.safe_load(
        base64.b64decode(env("KAAS_KUBE_CONFIG")).decode("utf-8")
    ),
    "MACHINE_IMAGE_PREFIX": env("KAAS_MACHINE_IMAGE_PREFIX"),
    "CLUSTER_IMAGE_REPOSITORY": env("KAAS_CLUSTER_IMAGE_REPOSITORY", str, ""),
    "DISABLE_SYNC_TENANT": env("KAAS_DISABLE_SYNC_TENANT", bool, False),
    "KAAS_WEB_LB": env("KAAS_WEB_LB", str, "117.1.28.200"),
    "KAAS_CLI_SERVER": env("KAAS_CLI_SERVER", str, "http://117.1.28.251:8080"),
    "KAAS_TERMINAL_BASE_ENDPOINT": env(
        "KAAS_TERMINAL_BASE_ENDPOINT", str, "http://cli.k8s.viettelcloud.vn"
    ),
    "KAAS_CLI_SERVER_VERIFY_SSL": env("KAAS_CLI_SERVER_VERIFY_SSL", bool, True),
    "KAAS_CMP_SYSTEM_USER": env("KAAS_CMP_SYSTEM_USER", str, "system_vke"),
    "KAAS_DEFAULT_ETCD_VERSION": env("KAAS_DEFAULT_ETCD_VERSION", str, "3.5.6"),
    "KAAS_DEFAULT_ETCD_VOLUME_SIZE": env("KAAS_DEFAULT_ETCD_VOLUME_SIZE", int, 10),
    "KAAS_DEFAULT_STORAGE_CLASS": env(
        "KAAS_DEFAULT_STORAGE_CLASS", str, "ssd-cinder-csi"
    ),
    "KAAS_DEFAULT_MANAGED_CP_REPLICAS": env("KAAS_DEFAULT_MANAGED_CP_REPLICAS", int, 1),
    "KAAS_MIMIR_GATEWAY_URL": env(
        "KAAS_MIMIR_GATEWAY_URL", str, "http://localhost:8081"
    ),
    "KAAS_PROMETHEUS_URL": env(
        "KAAS_PROMETHEUS_URL", str, "http://127.0.0.1:9090/prometheus"
    ),
}

IAAS_API_CONFIG = {
    "API_VERSION": env("IAAS_API_VERSION"),
    "API_ENDPOINT": env("IAAS_API_ENDPOINT"),
    "API_TOKEN": env("IAAS_API_TOKEN"),
    "API_RETRY_TOTAL": env("IAAS_API_RETRY_TOTAL", int, 5),
    "API_RETRY_BACKOFF_FACTOR": env("IAAS_API_RETRY_BACKOFF_FACTOR", float, 0.5),
    "API_RETRY_STATUS_CODE_LIST": env(
        "IAAS_API_RETRY_STATUS_CODE_LIST", list, [500, 502, 503, 504]
    ),
    "POOL_CONNECTIONS": env("IAAS_POOL_CONNECTIONS", int, 10),
    "POOL_MAX_SIZE": env("IAAS_POOL_MAX_SIZE", int, 10),
    "DISABLE_SYNC_TENANT": env("IAAS_DISABLE_SYNC_TENANT", bool, False),
    "VNC_URL_EXPIRE": env("IAAS_VNC_URL_EXPIRE", int, 60),
    "VNC_DOMAIN": env("IAAS_VNC_DOMAIN", str, "https://vnc.viettelcloud.vn"),
}

OBJECT_STORAGE = {
    "API_ENDPOINT": env("OBJECT_STORAGE_API_ENDPOINT", str, ""),
    "ADMIN_USERNAME": env("OBJECT_STORAGE_ADMIN_USERNAME", str, ""),
    "ADMIN_ACCESS_KEY": env("OBJECT_STORAGE_ADMIN_ACCESS_KEY", str, ""),
    "ADMIN_SECRET_KEY": env("OBJECT_STORAGE_ADMIN_SECRET_KEY", str, ""),
    "VERIFY_SSL": env("OBJECT_STORAGE_VERIFY_SSL", bool, False),
    "OBJECT_STORAGE_DOMAIN": env("OBJECT_STORAGE_DOMAIN", str, ""),
    "OBJECT_STORAGE_ZONEGROUP_DEFAULT": env(
        "OBJECT_STORAGE_ZONEGROUP_DEFAULT", str, "vn-central-1"
    ),
    "CMP_ADDRESS_BYPASS": env("OBJECT_STORAGE_CMP_ADDRESS_BYPASS", list, []),
}

KAAS_VAULT_CONFIG = {
    "KAAS_VAULT_SECRET_ENGINE": env("KAAS_VAULT_SECRET_ENGINE"),
}

SECRET_MANAGER_CONFIG = {
    "VAULT_SECRET_ENGINE": env(
        "SECRET_MANAGER_VAULT_SECRET_ENGINE", str, "secret-manager"
    ),
    "MAX_SECRET_COUNT": env("MAX_SECRET_COUNT", int, 100),
}

VAULT_CONFIG = {
    "VAULT_URL": env("VAULT_URL"),
    "VAULT_TOKEN": env("VAULT_TOKEN"),
    "VERIFY_SSL": env("VAULT_VERIFY_SSL", bool, False),
}

CERTIFICATE_CONFIG = {"MAX_CERTIFICATE_COUNT": env("MAX_CERTIFICATE_COUNT", int, 100)}

CONSUL_KV_CONFIG = {
    "HOST": env("CONSUL_KV_HOST"),
    "PORT": env("CONSUL_KV_PORT"),
}

BCCS_CONFIG = {
    "MOCK_REQUESTS": env("BCCS_MOCK_REQUESTS", bool, False),
    "USE_CACHE": env("BCCS_USE_CACHE", bool, False),
    "CACHE_TIMEOUT": env("BCCS_CACHE_TIMEOUT", int, 60 * 60 * 24),
    "PAYMENT_TIMEOUT": env("BCCS_PAYMENT_TIMEOUT", int, 60 * 5),
    # Customer management API config
    "CM_API_WSDL": env("CM_API_WSDL", str, "http://test/Api?wsdl"),
    "CM_API_USERNAME": env("CM_API_USERNAME", str, "username"),
    "CM_API_PASSWORD": env("CM_API_PASSWORD", str, "password"),
    # Invoice management API config
    "IM_API_WSDL": env("IM_API_WSDL", str, "http://test/Api?wsdl"),
    "IM_API_USERNAME": env("IM_API_USERNAME", str, "username"),
    "IM_API_PASSWORD": env("IM_API_PASSWORD", str, "password"),
    # Product API config
    "PRODUCT_API_WSDL": env("PRODUCT_API_WSDL", str, "http://test/Api?wsdl"),
    "PRODUCT_API_USERNAME": env("PRODUCT_API_USERNAME", str, "username"),
    "PRODUCT_API_PASSWORD": env("PRODUCT_API_PASSWORD", str, "password"),
    # Admin division API config
    "AD_API_WSDL": env("AD_API_WSDL", str, "http://test/Api?wsdl"),
    "AD_API_USERNAME": env("AD_API_USERNAME", str, "username"),
    "AD_API_PASSWORD": env("AD_API_PASSWORD", str, "password"),
    # Order API config
    "ORDER_API_WSDL": env("ORDER_API_WSDL", str, "http://test/Api?wsdl"),
    "ORDER_API_USERNAME": env("ORDER_API_USERNAME", str, "username"),
    "ORDER_API_PASSWORD": env("ORDER_API_PASSWORD", str, "password"),
    "ORDER_SYSTEM_TYPE": env("ORDER_SYSTEM_TYPE", str, "CMP"),
    "ORDER_SYSTEM_STAFF_CODE": env("ORDER_SYSTEM_STAFF_CODE", str, "username"),
    "ORDER_REC_TYPE_ID_GPKD": env("ORDER_REC_TYPE_ID_GPKD", int, 978),
    "ORDER_REC_TYPE_ID_CMNDMT": env("ORDER_REC_TYPE_ID_CMNDMT", int, 2103),
    "ORDER_REC_TYPE_ID_CMNDMS": env("ORDER_REC_TYPE_ID_CMNDMS", int, 2104),
    # Payment API config
    "PAYMENT_API_URL": env("PAYMENT_API_URL", str, ""),
    "PAYMENT_API_USERNAME": env("PAYMENT_API_USERNAME", str, ""),
    "PAYMENT_API_PASSWORD": env("PAYMENT_API_PASSWORD", str, ""),
    "PAYMENT_API_MERCHANT_CODE": env("PAYMENT_API_MERCHANT_CODE", str, ""),
    # MBCCS API config
    "MBCCS_API_WSDL": env("MBCCS_API_WSDL", str, "http://test/Api?wsdl"),
    "MBCCS_API_USERNAME": env("MBCCS_API_USERNAME", str, ""),
    "MBCCS_API_PASSWORD": env("MBCCS_API_PASSWORD", str, ""),
    "MBCCS_API_WSCODE": env(
        "MBCCS_API_WSCODE", str, "ndha_recognizeImageCustomerForCMP"
    ),
    # Document API config
    "DOCUMENT_FTP_HOST": env("DOCUMENT_FTP_HOST", str, ""),
    "DOCUMENT_FTP_USERNAME": env("DOCUMENT_FTP_USERNAME", str, ""),
    "DOCUMENT_FTP_PASSWORD": env("DOCUMENT_FTP_PASSWORD", str, ""),
    "DOCUMENT_FTP_BASE_DIR": env("DOCUMENT_FTP_BASE_DIR", str, ""),
    # Mail config
    "SEND_TRANSITION_EMAIL": env("SEND_TRANSITION_EMAIL", bool, True),
}

# Media files and Django-storages configuration
# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "media/"
USE_OBJECT_STORAGE = env("USE_OBJECT_STORAGE", bool, False)
if USE_OBJECT_STORAGE:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_ACCESS_KEY_ID = env("STORAGE_CONFIG_S3_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = env("STORAGE_CONFIG_S3_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = env("STORAGE_CONFIG_S3_STORAGE_BUCKET_NAME")
    AWS_S3_ENDPOINT_URL = env("STORAGE_CONFIG_S3_ENDPOINT_URL")
    AWS_S3_FILE_OVERWRITE = env("STORAGE_CONFIG_S3_FILE_OVERWRITE", bool, False)
    AWS_S3_VERIFY = env("OBJECT_STORAGE_VERIFY_SSL", bool, False)

DBAAS_API_CONFIG = {
    "API_URL": env("DBAAS_API_URL", str, "http://test:8000"),
    "API_TOKEN": env("DBAAS_API_TOKEN", str, "token"),
    "RETRY_TOTAL": env("DBAAS_API_RETRY_TOTAL", int, 5),
    "RETRY_BACKOFF_FACTOR": env("DBAAS_API_RETRY_BACKOFF_FACTOR", float, 0.5),
    "RETRY_STATUS_CODE_LIST": env(
        "DBAAS_API_RETRY_STATUS_CODES", list, [500, 502, 503, 504]
    ),
    "CONNECTION_POOL_MAX_SIZE": env("DBAAS_API_MAX_CONNECTION", int, 10),
    "VERIFY_SSL": env("DBAAS_API_VERIFY_SSL", bool, False),
    "API_PAGE_SIZE": env("DBAAS_API_PAGE_SIZE", int, 50),
    "MAX_ERROR_MSG_SIZE": env("DBAAS_MAX_ERROR_MSG_SIZE", int, 1024),
    "DEFAULT_HTTP_API_TIMEOUT": env("DBAAS_DEFAULT_HTTP_API_TIMEOUT", int, 50),
    "MAX_DB_INSTANCE_REPLICA_PER_DB_INSTANCE": env(
        "MAX_DB_INSTANCE_REPLICA_PER_DB_INSTANCE", int, 2
    ),
}

FLOWER_CONFIG = {
    "FLOWER_URL": env("FLOWER_URL"),
    "FLOWER_TIME_QUERY_MINUTES": env("FLOWER_TIME_QUERY_MINUTES", int, 30),
}

# Action Log config
ENABLE_ACTION_LOG = env("ENABLE_ACTION_LOG", bool, False)
MAX_DAY_QUERY_ACTIVITY_LOG = env("MAX_DAY_QUERY_ACTIVITY_LOG", int, 90)

API_GATEWAY = {
    "VAULT_URL": env("API_GATEWAY_VAULT_URL", str, ""),
    "VAULT_TOKEN": env("API_GATEWAY_VAULT_TOKEN", str, ""),
    "VERIFY_SSL": env("API_GATEWAY_VAULT_VERIFY_SSL", bool, False),
    "API_KEY": env("API_GATEWAY_API_KEY", str, ""),
    "API_SIX_URL": env("API_GATEWAY_API_SIX_URL", str, ""),
    "DOMAIN_NAME": env("API_GATEWAY_DOMAIN_NAME", str, ""),
    "RATE_LIMIT_POLICY": env("API_GATEWAY_RATE_LIMIT_POLICY", str, ""),
    "REDIS_CLUSTER_NAME": env("API_GATEWAY_REDIS_CLUSTER_NAME", str, ""),
    "REDIS_CLUSTER_NODES": env("API_GATEWAY_REDIS_CLUSTER_NODES", list, []),
    "PROMETHEUS_ENDPOINT": env(
        "API_GATEWAY_PROMETHEUS_ENDPOINT", str, "http://test:9090"
    ),
    "REDIS_PASSWORD": env("API_GATEWAY_REDIS_PASSWORD", str, ""),
    "ALLOW_DEGRADATION": env("API_GATEWAY_ALLOW_DEGRADATION", bool, True),
}

# CICD
CICD_CONFIG = {
    "IMAGE_REPOSITORY": env("CICD_IMAGE_REPOSITORY", str, ""),
    "KUBE_CONFIG_DICT": yaml.safe_load(
        base64.b64decode(
            env(
                "CICD_KUBE_CONFIG_DICT",
                str,
                "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiB0ZXN0CiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjQ1MTIzCiAgbmFtZToga2luZC1hcmdvCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBraW5kLWFyZ28KICAgIHVzZXI6IGtpbmQtYXJnbwogIG5hbWU6IGtpbmQtYXJnbwpjdXJyZW50LWNvbnRleHQ6IGtpbmQtYXJnbwpraW5kOiBDb25maWcKcHJlZmVyZW5jZXM6IHt9CnVzZXJzOgotIG5hbWU6IGtpbmQtYXJnbwogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogdGVzdAogICAgY2xpZW50LWtleS1kYXRhOiB0ZXN0Cg==",
            )
        ).decode("utf-8")
    ),  # noqa
    "KUBERNETES_CLUSTER_URL": env("CICD_KUBERNETES_CLUSTER_URL", str, ""),
    "REQUEST_TIMEOUT": env("CICD_REQUEST_TIMEOUT", int, 60),
}

# Support configs
SUPPORT_CONFIG = {
    "MAX_ACTIVE_QUESTIONS": env("SUPPORT_MAX_ACTIVE_QUESTIONS", int, 100),
    "MAX_DAY_QUESTION_RESPONDED": env("SUPPORT_MAX_DAY_QUESTION_RESPONDED", int, 30),
    "MAX_ACTIVE_TIME": env("SUPPORT_MAX_ACTIVE_TIME", int, 15),
    "MAX_DAY_QUESTION_REOPEN": env("SUPPORT_MAX_DAY_QUESTION_REOPEN", int, 15),
    "ENABLE_SIGNAL_SEND_EMAIL": env("SUPPORT_ENABLE_SIGNAL_SEND_EMAIL", bool, True),
}

KAFKA_CONFIG = {
    "bootstrap_servers": env("KAFKA_BOOTSTRAP_SERVERS", str, "localhost:9092"),
    "group_id": env("KAFKA_GROUP_ID", str, "cmp-backend"),
    "client_id": env("KAFKA_CLIENT_ID", str, "cmp-backend"),
    "auto_offset_reset": env("KAFKA_AUTO_OFFSET_RESET", str, "latest"),
    "enable_auto_commit": env("KAFKA_AUTO_COMMIT_ENABLED", bool, False),
}
KAFKA_CONSUMER_TIMEOUT = 5.0 if DEBUG else 30.0
KAFKA_IAM_TOPIC = env("KAFKA_IAM_TOPIC", str, "keycloak-events")
